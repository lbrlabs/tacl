{
    "swagger": "2.0",
    "info": {
        "description": "A Tailscale-based ACL management server.",
        "title": "TACL API",
        "contact": {
            "name": "TACL Maintainers",
            "url": "https://github.com/lbrlabs/tacl",
            "email": "mail@lbrlabs.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "0.1"
    },
    "basePath": "/",
    "paths": {
        "/acls": {
            "get": {
                "description": "Returns the entire list of ExtendedACLEntry objects.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACLs"
                ],
                "summary": "List all ACL entries",
                "responses": {
                    "200": {
                        "description": "List of ACL entries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/acls.ExtendedACLEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to parse ACLs",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the ACL fields for an entry identified by its UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACLs"
                ],
                "summary": "Update an existing ACL",
                "parameters": [
                    {
                        "description": "Update ACL request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/acls.updateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/acls.ExtendedACLEntry"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid request data",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "ACL entry not found",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update ACL entry",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new ACL by generating a new UUID and storing the provided ACL fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACLs"
                ],
                "summary": "Create a new ACL",
                "parameters": [
                    {
                        "description": "ACL fields",
                        "name": "acl",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/acls.ACL"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/acls.ExtendedACLEntry"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to save new ACL entry",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an ACL entry by specifying its ID in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACLs"
                ],
                "summary": "Delete an ACL",
                "parameters": [
                    {
                        "description": "Delete ACL request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/acls.deleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ACL entry deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid ID",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "ACL entry not found with that ID",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete ACL entry",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/acls/{id}": {
            "get": {
                "description": "Retrieves a single ACL entry by its stable UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACLs"
                ],
                "summary": "Get one ACL by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ACL ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/acls.ExtendedACLEntry"
                        }
                    },
                    "404": {
                        "description": "ACL entry not found",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse ACLs",
                        "schema": {
                            "$ref": "#/definitions/acls.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/acltests": {
            "get": {
                "description": "Returns all ExtendedACLTest items from storage.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACLTests"
                ],
                "summary": "List all ACL tests",
                "responses": {
                    "200": {
                        "description": "List of ACL test items",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/acltests.ExtendedACLTest"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to parse ACLTests",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing ACL test by ID with new ACLTest fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACLTests"
                ],
                "summary": "Update an ACL test",
                "parameters": [
                    {
                        "description": "Update ACLTest request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/acltests.updateTestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/acltests.ExtendedACLTest"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid request data",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "ACLTest not found with that ID",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update ACLTest",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new test item with a generated UUID, storing the provided ACLTest fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACLTests"
                ],
                "summary": "Create a new ACL test",
                "parameters": [
                    {
                        "description": "ACLTest fields",
                        "name": "test",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/acltests.ACLTest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/acltests.ExtendedACLTest"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or save ACLTests",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an ACLTest by specifying its ID in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACLTests"
                ],
                "summary": "Delete an ACL test",
                "parameters": [
                    {
                        "description": "Delete ACLTest request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/acltests.deleteTestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ACLTest deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid ID",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "ACLTest not found with that ID",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete ACLTest",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/acltests/{id}": {
            "get": {
                "description": "Retrieves an ACL test item by its stable UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACLTests"
                ],
                "summary": "Get one ACL test by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ACLTest ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/acltests.ExtendedACLTest"
                        }
                    },
                    "404": {
                        "description": "ACLTest not found with that ID",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse ACLTests",
                        "schema": {
                            "$ref": "#/definitions/acltests.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/autoapprovers": {
            "get": {
                "description": "Returns the entire auto-approvers struct if present, otherwise returns an empty object or 404.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AutoApprovers"
                ],
                "summary": "Get auto-approvers",
                "responses": {
                    "200": {
                        "description": "Auto-approvers found (or empty)",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ACLAutoApproversDoc"
                        }
                    },
                    "500": {
                        "description": "Failed to parse autoApprovers",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing auto-approvers struct. If none exists, returns 404.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AutoApprovers"
                ],
                "summary": "Update auto-approvers",
                "parameters": [
                    {
                        "description": "Updated autoApprovers data",
                        "name": "autoApprovers",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ACLAutoApproversDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ACLAutoApproversDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No autoApprovers found to update",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update autoApprovers",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new ACLAutoApprovers if none exists. Returns 409 if one already exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AutoApprovers"
                ],
                "summary": "Create auto-approvers",
                "parameters": [
                    {
                        "description": "AutoApprovers data",
                        "name": "autoApprovers",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ACLAutoApproversDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ACLAutoApproversDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "autoApprovers already exists",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or save autoApprovers",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes the autoApprovers from state. If none exists, returns 404.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AutoApprovers"
                ],
                "summary": "Delete auto-approvers",
                "responses": {
                    "200": {
                        "description": "autoApprovers deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "No autoApprovers found",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete autoApprovers",
                        "schema": {
                            "$ref": "#/definitions/autoapprovers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/derpmap": {
            "get": {
                "description": "Returns the entire ACLDERPMap if it exists, else returns an empty doc or 404.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DERPMap"
                ],
                "summary": "Get DERP map",
                "responses": {
                    "200": {
                        "description": "DERP map found (or empty)",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ACLDERPMapDoc"
                        }
                    },
                    "500": {
                        "description": "Failed to parse DERPMap",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the DERPMap if it exists, or returns 404 if not found.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DERPMap"
                ],
                "summary": "Update an existing DERPMap",
                "parameters": [
                    {
                        "description": "Updated DERPMap data",
                        "name": "derpMap",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/derpmap.ACLDERPMapDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ACLDERPMapDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No DERPMap found to update",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update DERPMap",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new DERPMap if none exists. If one already exists, returns 409.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DERPMap"
                ],
                "summary": "Create a new DERPMap",
                "parameters": [
                    {
                        "description": "DERPMap data",
                        "name": "derpMap",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/derpmap.ACLDERPMapDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ACLDERPMapDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "DERPMap already exists",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or save DERPMap",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes the DERPMap from state. Returns 404 if not found.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DERPMap"
                ],
                "summary": "Delete the DERPMap",
                "responses": {
                    "200": {
                        "description": "DERPMap deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "No DERPMap found to delete",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete DERPMap",
                        "schema": {
                            "$ref": "#/definitions/derpmap.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/groups": {
            "get": {
                "description": "Returns an array of Groups. Each group has a name and members.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "List all groups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/groups.Group"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to parse groups",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the group's members by matching on the group name. Returns 404 if not found.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Update an existing group",
                "parameters": [
                    {
                        "description": "Group with updated members",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/groups.Group"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/groups.Group"
                        }
                    },
                    "400": {
                        "description": "Bad request or missing name",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update group",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a group with a unique name. Returns 409 if the group name already exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Create a new group",
                "parameters": [
                    {
                        "description": "Group to create",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/groups.Group"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/groups.Group"
                        }
                    },
                    "400": {
                        "description": "Bad request or missing name",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Group already exists",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or save groups",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a group by name. Expects a JSON body with { \"name\": \"groupName\" }.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Delete a group",
                "parameters": [
                    {
                        "description": "Delete group request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/groups.DeleteGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request or missing name",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to save changes",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/groups/{name}": {
            "get": {
                "description": "Retrieves a specific group by its name (e.g. \"engineering\").",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Get group by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/groups.Group"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse groups",
                        "schema": {
                            "$ref": "#/definitions/groups.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/hosts": {
            "get": {
                "description": "Returns an array of Host objects. The final data is a map in storage, converted back to an array.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "List all hosts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/hosts.Host"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to parse hosts",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the IP for a host by matching the 'name'. Returns 404 if not found.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Update an existing host",
                "parameters": [
                    {
                        "description": "Updated host info",
                        "name": "host",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hosts.Host"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/hosts.Host"
                        }
                    },
                    "400": {
                        "description": "Bad request or missing fields",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Host not found",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update host",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a host mapping from name to IP. Returns 409 if the hostname already exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Create a new host",
                "parameters": [
                    {
                        "description": "Host to create",
                        "name": "host",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hosts.Host"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/hosts.Host"
                        }
                    },
                    "400": {
                        "description": "Bad request or missing fields",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Host already exists",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or save hosts",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a host by name, based on JSON input { \"name\": \"...\" }.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Delete a host",
                "parameters": [
                    {
                        "description": "Delete host request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hosts.DeleteHostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Host deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing name",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Host not found",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to save changes",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/hosts/{name}": {
            "get": {
                "description": "Retrieves a single host by its name (hostname).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hosts"
                ],
                "summary": "Get a host by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hostname",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/hosts.Host"
                        }
                    },
                    "404": {
                        "description": "Host not found",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse hosts",
                        "schema": {
                            "$ref": "#/definitions/hosts.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodeattrs": {
            "get": {
                "description": "Returns the entire list of ExtendedNodeAttrGrant objects from state.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NodeAttrs"
                ],
                "summary": "List all node attribute grants",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/nodeattrs.ExtendedNodeAttrGrantDoc"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to parse node attributes",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a grant by ID. If `app` is set, `target` is forced to [\"*\"].",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NodeAttrs"
                ],
                "summary": "Update an existing node attribute grant",
                "parameters": [
                    {
                        "description": "Update NodeAttr request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.updateNodeAttrRequestDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ExtendedNodeAttrGrantDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or missing fields",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "NodeAttr not found",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or update node attribute",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new ExtendedNodeAttrGrant with either `attr` or `app`. If `app` is set, `target` is forced to [\"*\"].",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NodeAttrs"
                ],
                "summary": "Create a new node attribute grant",
                "parameters": [
                    {
                        "description": "NodeAttrGrant input",
                        "name": "grant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.NodeAttrGrantInputDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ExtendedNodeAttrGrantDoc"
                        }
                    },
                    "400": {
                        "description": "Either 'attr' or 'app' must be set, but not both",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse node attributes or save new grant",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes by specifying its ID in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NodeAttrs"
                ],
                "summary": "Delete a node attribute grant",
                "parameters": [
                    {
                        "description": "Delete NodeAttr request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.deleteNodeAttrRequestDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Node attribute deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid ID",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "NodeAttr not found with that id",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete node attribute",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodeattrs/{id}": {
            "get": {
                "description": "Retrieves a single ExtendedNodeAttrGrant by its stable UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NodeAttrs"
                ],
                "summary": "Get node attribute grant by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NodeAttrGrant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ExtendedNodeAttrGrantDoc"
                        }
                    },
                    "404": {
                        "description": "No nodeattr found with that id",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse node attributes",
                        "schema": {
                            "$ref": "#/definitions/nodeattrs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/postures": {
            "get": {
                "description": "Returns an object containing \"defaultSourcePosture\" and an array of named \"items\".",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Postures"
                ],
                "summary": "List all named postures + default",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/postures.listAllResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or load postures",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the posture by matching on its name. Returns 404 if not found.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Postures"
                ],
                "summary": "Update a posture",
                "parameters": [
                    {
                        "description": "Posture with updated rules",
                        "name": "posture",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/postures.Posture"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/postures.Posture"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Posture not found",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update posture",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a posture with unique name. Returns 409 if that name already exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Postures"
                ],
                "summary": "Create a new posture",
                "parameters": [
                    {
                        "description": "Posture to create",
                        "name": "posture",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/postures.Posture"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/postures.Posture"
                        }
                    },
                    "400": {
                        "description": "Bad request or missing name",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Posture already exists",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or save postures",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a named posture by JSON body. Expects { \"name\": \"\u003cpostureName\u003e\" }.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Postures"
                ],
                "summary": "Delete a posture",
                "parameters": [
                    {
                        "description": "Delete posture request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/postures.DeletePostureRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Posture deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request or missing name",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Posture not found",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to save changes",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/postures/default": {
            "get": {
                "description": "Returns the \"defaultSourcePosture\" array if set, otherwise an empty array or 200 with none.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Postures"
                ],
                "summary": "Get the default posture",
                "responses": {
                    "200": {
                        "description": "defaultSourcePosture: []string",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to parse or load postures",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Overwrites the default posture with the given array of rules.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Postures"
                ],
                "summary": "Set the default posture",
                "parameters": [
                    {
                        "description": "Default posture array",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/postures.DefaultPostureBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "defaultSourcePosture: updated array",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to set default posture",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes any default posture rules by setting them to nil.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Postures"
                ],
                "summary": "Delete the default posture",
                "responses": {
                    "200": {
                        "description": "defaultSourcePosture removed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete default posture",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/postures/{name}": {
            "get": {
                "description": "Retrieves a single posture object by its name (e.g. \"latestMac\").",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Postures"
                ],
                "summary": "Get posture by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the posture",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/postures.Posture"
                        }
                    },
                    "404": {
                        "description": "Posture not found",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or load postures",
                        "schema": {
                            "$ref": "#/definitions/postures.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settings": {
            "get": {
                "description": "Returns the current settings or an empty struct if none exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Retrieve the settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/settings.Settings"
                        }
                    },
                    "500": {
                        "description": "Failed to parse settings",
                        "schema": {
                            "$ref": "#/definitions/settings.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the current settings. Returns 404 if none exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Update existing settings",
                "parameters": [
                    {
                        "description": "Updated settings",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/settings.Settings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/settings.Settings"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "$ref": "#/definitions/settings.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No existing settings to update",
                        "schema": {
                            "$ref": "#/definitions/settings.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update settings",
                        "schema": {
                            "$ref": "#/definitions/settings.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new Settings object if none exist; returns 409 if one already exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Create new settings",
                "parameters": [
                    {
                        "description": "Settings to create",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/settings.Settings"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/settings.Settings"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "$ref": "#/definitions/settings.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Settings already exist",
                        "schema": {
                            "$ref": "#/definitions/settings.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to check or save settings",
                        "schema": {
                            "$ref": "#/definitions/settings.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes the current settings if present; returns 404 if none exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Delete settings",
                "responses": {
                    "200": {
                        "description": "Settings deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "No existing settings found to delete",
                        "schema": {
                            "$ref": "#/definitions/settings.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete settings",
                        "schema": {
                            "$ref": "#/definitions/settings.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ssh": {
            "get": {
                "description": "Returns the entire slice of ExtendedSSHEntry from state.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSH"
                ],
                "summary": "List all SSH rules",
                "responses": {
                    "200": {
                        "description": "List of SSH rules",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ssh.ExtendedSSHEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to parse SSH rules",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "User must provide JSON like { \"id\":\"\u003cuuid\u003e\", \"rule\": {...} } to replace the rule with matching ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSH"
                ],
                "summary": "Update an existing SSH rule",
                "parameters": [
                    {
                        "description": "Update SSH request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ssh.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ssh.ExtendedSSHEntry"
                        }
                    },
                    "400": {
                        "description": "Bad request or missing fields",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "SSH rule not found with that ID",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or update SSH rule",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Appends a new ExtendedSSHEntry (with auto-generated ID) to the list of SSH rules.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSH"
                ],
                "summary": "Create a new SSH rule",
                "parameters": [
                    {
                        "description": "SSH rule fields",
                        "name": "rule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ssh.ACLSSH"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ssh.ExtendedSSHEntry"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or fields",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or save SSH rules",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "User must provide JSON like { \"id\":\"\u003cuuid\u003e\" } to remove the rule with matching ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSH"
                ],
                "summary": "Delete an SSH rule",
                "parameters": [
                    {
                        "description": "Delete SSH rule request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ssh.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSH rule deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid ID",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "SSH rule not found with that ID",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete SSH rule",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ssh/{id}": {
            "get": {
                "description": "Retrieves a single ExtendedSSHEntry by its stable UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSH"
                ],
                "summary": "Get SSH rule by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the SSH rule",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ssh.ExtendedSSHEntry"
                        }
                    },
                    "404": {
                        "description": "SSH rule not found with that ID",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse SSH rules",
                        "schema": {
                            "$ref": "#/definitions/ssh.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tagowners": {
            "get": {
                "description": "Returns an array of TagOwner objects from state.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TagOwners"
                ],
                "summary": "List all tag owners",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tagowners.TagOwner"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to parse tagOwners",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the TagOwner with a matching name. Expects JSON: { \"name\": \"...\", \"owners\": [...] }.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TagOwners"
                ],
                "summary": "Update a tag owner",
                "parameters": [
                    {
                        "description": "TagOwner to update",
                        "name": "tagOwner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tagowners.TagOwner"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tagowners.TagOwner"
                        }
                    },
                    "400": {
                        "description": "Bad request or missing name",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "TagOwner not found",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or save changes",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a TagOwner. Returns 409 if name already exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TagOwners"
                ],
                "summary": "Create a new tag owner",
                "parameters": [
                    {
                        "description": "TagOwner to create",
                        "name": "tagOwner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tagowners.TagOwner"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/tagowners.TagOwner"
                        }
                    },
                    "400": {
                        "description": "Bad request or missing name",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "TagOwner already exists",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse or save tagOwners",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Expects JSON: { \"name\": \"webserver\" } to remove the matching TagOwner.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TagOwners"
                ],
                "summary": "Delete a tag owner",
                "parameters": [
                    {
                        "description": "Delete TagOwner request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tagowners.deleteTagOwnerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TagOwner deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request or missing name",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "TagOwner not found",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to save changes",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tagowners/{name}": {
            "get": {
                "description": "Retrieves the TagOwner with the given name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TagOwners"
                ],
                "summary": "Get a tag owner by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tagowners.TagOwner"
                        }
                    },
                    "404": {
                        "description": "TagOwner not found",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to parse tagOwners",
                        "schema": {
                            "$ref": "#/definitions/tagowners.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "acls.ACL": {
            "description": "ACL defines the action, source, destination, and optional posture for a single rule.",
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action specifies the rule action (e.g. \"accept\" or \"deny\").",
                    "type": "string"
                },
                "dst": {
                    "description": "Destination is a list of CIDRs or tags that match the traffic destination.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proto": {
                    "description": "Protocol (proto) can specify \"tcp\", \"udp\", etc.",
                    "type": "string"
                },
                "src": {
                    "description": "Source is a list of CIDRs or tags that match the traffic source.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "srcPosture": {
                    "description": "SourcePosture is for an experimental feature and not yet public or documented as of 2023-08-17.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "acls.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "acls.ExtendedACLEntry": {
            "description": "ExtendedACLEntry wraps an ACL with a unique ID for local storage.",
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action specifies the rule action (e.g. \"accept\" or \"deny\").",
                    "type": "string"
                },
                "dst": {
                    "description": "Destination is a list of CIDRs or tags that match the traffic destination.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "stable UUID",
                    "type": "string"
                },
                "proto": {
                    "description": "Protocol (proto) can specify \"tcp\", \"udp\", etc.",
                    "type": "string"
                },
                "src": {
                    "description": "Source is a list of CIDRs or tags that match the traffic source.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "srcPosture": {
                    "description": "SourcePosture is for an experimental feature and not yet public or documented as of 2023-08-17.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "acls.deleteRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "acls.updateRequest": {
            "type": "object",
            "properties": {
                "entry": {
                    "$ref": "#/definitions/acls.ACL"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "acltests.ACLTest": {
            "description": "ACLTest holds test scenarios like \"deny\" rules, \"accept\" rules, protocol, etc.",
            "type": "object",
            "properties": {
                "accept": {
                    "description": "Accept is a list of rules or addresses to be accepted.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deny": {
                    "description": "Deny is a list of rules or addresses to be denied.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proto": {
                    "description": "Proto indicates the protocol (tcp, udp, etc.).",
                    "type": "string"
                },
                "src": {
                    "description": "Source is a string describing the traffic source (e.g., IP or user).",
                    "type": "string"
                }
            }
        },
        "acltests.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "acltests.ExtendedACLTest": {
            "description": "ExtendedACLTest includes the test data plus an auto-generated ID.",
            "type": "object",
            "properties": {
                "accept": {
                    "description": "Accept is a list of rules or addresses to be accepted.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deny": {
                    "description": "Deny is a list of rules or addresses to be denied.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "proto": {
                    "description": "Proto indicates the protocol (tcp, udp, etc.).",
                    "type": "string"
                },
                "src": {
                    "description": "Source is a string describing the traffic source (e.g., IP or user).",
                    "type": "string"
                }
            }
        },
        "acltests.deleteTestRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "acltests.updateTestRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "test": {
                    "$ref": "#/definitions/acltests.ACLTest"
                }
            }
        },
        "autoapprovers.ACLAutoApproversDoc": {
            "type": "object",
            "properties": {
                "exitNode": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "routes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "autoapprovers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "derpmap.ACLDERPMapDoc": {
            "type": "object",
            "properties": {
                "regions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/derpmap.ACLDERPRegionDoc"
                    }
                }
            }
        },
        "derpmap.ACLDERPRegionDoc": {
            "type": "object",
            "properties": {
                "regionCode": {
                    "type": "string"
                },
                "regionID": {
                    "type": "integer"
                }
            }
        },
        "derpmap.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "groups.DeleteGroupRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "groups.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "groups.Group": {
            "description": "A Group has a required Name and a list of Members.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "members": {
                    "description": "Members is the list of user identifiers or tags belonging to this group.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the unique name of the group (e.g., \"engineering\").",
                    "type": "string"
                }
            }
        },
        "hosts.DeleteHostRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "hosts.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "hosts.Host": {
            "description": "Host has a required name (hostname) and IP.",
            "type": "object",
            "required": [
                "ip",
                "name"
            ],
            "properties": {
                "ip": {
                    "description": "IP is the IP or CIDR address associated with this hostname.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the hostname identifier.",
                    "type": "string"
                }
            }
        },
        "nodeattrs.AppConnectorInputDoc": {
            "type": "object",
            "properties": {
                "connectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "nodeattrs.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "nodeattrs.ExtendedNodeAttrGrantDoc": {
            "type": "object",
            "properties": {
                "app": {
                    "description": "App is present if this is an app-based grant.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/nodeattrs.AppConnectorInputDoc"
                        }
                    }
                },
                "attr": {
                    "description": "Attr is the list of attributes if this is an attr-based grant.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "ID is the local stable UUID.",
                    "type": "string"
                },
                "target": {
                    "description": "Target is the list of node targets for the attribute grant.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "nodeattrs.NodeAttrGrantInputDoc": {
            "type": "object",
            "required": [
                "target"
            ],
            "properties": {
                "app": {
                    "description": "App is a map of \u003cstring\u003e to []AppConnectorInputDoc if not using \"attr\".",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/nodeattrs.AppConnectorInputDoc"
                        }
                    }
                },
                "attr": {
                    "description": "Attr is a list of attribute strings if not using \"app\".",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "target": {
                    "description": "Target is a list of node targets (could be [\"*\"] if using app).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "nodeattrs.deleteNodeAttrRequestDoc": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "nodeattrs.updateNodeAttrRequestDoc": {
            "type": "object",
            "properties": {
                "grant": {
                    "$ref": "#/definitions/nodeattrs.NodeAttrGrantInputDoc"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "postures.DefaultPostureBody": {
            "type": "object",
            "properties": {
                "defaultSourcePosture": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "postures.DeletePostureRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "postures.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "postures.Posture": {
            "description": "Posture defines a named posture with a list of rule expressions.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name is the unique name of this posture.",
                    "type": "string"
                },
                "rules": {
                    "description": "Rules is a list of string expressions describing posture requirements.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "postures.listAllResponse": {
            "type": "object",
            "properties": {
                "defaultSourcePosture": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/postures.Posture"
                    }
                }
            }
        },
        "settings.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "settings.Settings": {
            "description": "Settings define certain toggles or values controlling features like IPv4 usage, NAT routing, etc.",
            "type": "object",
            "properties": {
                "disableIPv4": {
                    "description": "DisableIPv4 indicates whether IPv4 traffic is disabled.",
                    "type": "boolean"
                },
                "oneCGNATRoute": {
                    "description": "OneCGNATRoute can store a special CGNAT route (e.g., \"100.64.0.0/10\").",
                    "type": "string"
                },
                "randomizeClientPort": {
                    "description": "RandomizeClientPort indicates whether to use a random local port instead of a fixed one.",
                    "type": "boolean"
                }
            }
        },
        "ssh.ACLSSH": {
            "description": "ACLSSH defines fields for a single SSH rule, such as action, source, and destination.",
            "type": "object",
            "properties": {
                "acceptEnv": {
                    "description": "AcceptEnv is a list of environment variables allowed to pass through the SSH session.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "action": {
                    "description": "Action can be \"accept\" or \"check\".",
                    "type": "string"
                },
                "checkPeriod": {
                    "description": "CheckPeriod is only meaningful if Action == \"check\" (e.g. \"12h\", \"30m\").",
                    "type": "string"
                },
                "dst": {
                    "description": "Dst is a list of destination tags or CIDRs for this SSH rule.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "src": {
                    "description": "Src is a list of source tags or CIDRs allowed by this SSH rule.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "users": {
                    "description": "Users is a list of SSH users permitted by this rule.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ssh.DeleteRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "ssh.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "ssh.ExtendedSSHEntry": {
            "description": "ExtendedSSHEntry is stored in TACL with a UUID \"id\" plus the SSH fields.",
            "type": "object",
            "properties": {
                "acceptEnv": {
                    "description": "AcceptEnv is a list of environment variables allowed to pass through the SSH session.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "action": {
                    "description": "Action can be \"accept\" or \"check\".",
                    "type": "string"
                },
                "checkPeriod": {
                    "description": "CheckPeriod is only meaningful if Action == \"check\" (e.g. \"12h\", \"30m\").",
                    "type": "string"
                },
                "dst": {
                    "description": "Dst is a list of destination tags or CIDRs for this SSH rule.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "ID is a stable UUID for each SSH rule.",
                    "type": "string"
                },
                "src": {
                    "description": "Src is a list of source tags or CIDRs allowed by this SSH rule.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "users": {
                    "description": "Users is a list of SSH users permitted by this rule.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ssh.UpdateRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "rule": {
                    "$ref": "#/definitions/ssh.ACLSSH"
                }
            }
        },
        "tagowners.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "tagowners.TagOwner": {
            "description": "TagOwner associates a tag name (e.g. \"webserver\") with a list of owners.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name is the name of the tag (e.g. \"webserver\").",
                    "type": "string"
                },
                "owners": {
                    "description": "Owners is a list of owners for this tag.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "tagowners.deleteTagOwnerRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        }
    }
}